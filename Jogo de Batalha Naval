#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define TAM 8
#define NAVIOS 5

void inicializarTabuleiro(char tabuleiro[TAM][TAM]) {
    for (int i = 0; i < TAM; i++)
        for (int j = 0; j < TAM; j++)
            tabuleiro[i][j] = '-';
}

void posicionarNavios(char tabuleiro[TAM][TAM]) {
    int colocados = 0;
    while (colocados < NAVIOS) {
        int x = rand() % TAM;
        int y = rand() % TAM;
        if (tabuleiro[x][y] == '-') {
            tabuleiro[x][y] = 'N';
            colocados++;
        }
    }
}

void mostrarTabuleiro(char tabuleiro[TAM][TAM], int revelar) {
    printf("  ");
    for (int j = 0; j < TAM; j++) printf("%d ", j);
    printf("\n");

    for (int i = 0; i < TAM; i++) {
        printf("%d ", i);
        for (int j = 0; j < TAM; j++) {
            if (tabuleiro[i][j] == 'N' && !revelar)
                printf("- ");
            else
                printf("%c ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}

// Funções de habilidades

void habilidadeCone(char tabuleiro[TAM][TAM], int x, int y) {
    for (int i = 1; i <= 3; i++) {
        int nx = x - i;
        if (nx >= 0) {
            if (tabuleiro[nx][y] == 'N') tabuleiro[nx][y] = 'X';
            else tabuleiro[nx][y] = 'O';
        }
    }
}

void habilidadeCruz(char tabuleiro[TAM][TAM], int x, int y) {
    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if (nx >= 0 && nx < TAM && ny >= 0 && ny < TAM) {
            if (tabuleiro[nx][ny] == 'N') tabuleiro[nx][ny] = 'X';
            else tabuleiro[nx][ny] = 'O';
        }
    }
}

void habilidadeOctaedro(char tabuleiro[TAM][TAM], int x, int y) {
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            if (i == 0 && j == 0) continue; // centro ignorado
            int nx = x + i;
            int ny = y + j;
            if (nx >= 0 && nx < TAM && ny >= 0 && ny < TAM) {
                if (tabuleiro[nx][ny] == 'N') tabuleiro[nx][ny] = 'X';
                else tabuleiro[nx][ny] = 'O';
            }
        }
    }
}

// Main

int main() {
    char tabuleiro[TAM][TAM];
    int x, y, opcao;

    srand(time(NULL));
    inicializarTabuleiro(tabuleiro);
    posicionarNavios(tabuleiro);

    printf("=== BATALHA NAVAL COM HABILIDADES ===\n");

    do {
        mostrarTabuleiro(tabuleiro, 0);
        printf("\n1. Atacar célula\n2. Usar Habilidade: CONE\n3. Usar Habilidade: CRUZ\n4. Usar Habilidade: OCTAEDRO\n0. Sair\nEscolha: ");
        scanf("%d", &opcao);

        if (opcao == 0) break;

        printf("Informe coordenadas (linha coluna): ");
        scanf("%d %d", &x, &y);

        if (x < 0 || x >= TAM || y < 0 || y >= TAM) {
            printf("Coordenadas inválidas!\n");
            continue;
        }

        switch (opcao) {
            case 1:
                if (tabuleiro[x][y] == 'N') {
                    printf("ACERTOU!\n");
                    tabuleiro[x][y] = 'X';
                } else {
                    printf("Errou...\n");
                    tabuleiro[x][y] = 'O';
                }
                break;
            case 2:
                habilidadeCone(tabuleiro, x, y);
                break;
            case 3:
                habilidadeCruz(tabuleiro, x, y);
                break;
            case 4:
                habilidadeOctaedro(tabuleiro, x, y);
                break;
            default:
                printf("Opção inválida!\n");
        }
    } while (1);

    printf("Tabuleiro final:\n");
    mostrarTabuleiro(tabuleiro, 1);
    return 0;
}
